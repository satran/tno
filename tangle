#!/bin/sh
#
# tangle is a command that is used to extract code snippets from
# various text files and writes to either stdout or to the file
# attribute.
set -e

file=$1

if [[ -z "file" ]]; then
    printf "usage: %s <file>" $(basename $0)
    exit -1
fi

first_block=true
first_line=true
first_comment_block=false
global_settings=false
code_block=false
tangle=true
tanglefile=/dev/stdout
mkdirp=
append=true

function set_params() {
    params=$(sed 's/^```//' <<< $@)
    for param in $params
    do
	IFS=':' read arg opt <<< "$param"
	case $arg in
	    # This weird evaluation is to evaluate variables like
	    # HOME that might be used for the tangle file names
	    'file') tanglefile=$(echo $(eval "echo $opt"))
		    ;;
	    'mkdirp') mkdirp=$opt
		      ;;
	    'append') append=$opt
		      ;;
	    'tangle') tangle=$opt
		      ;;
	esac
    done
}

function set_as_default(){
    d_tanglefile=$tanglefile
    d_mkdirp=$mkdirp
    d_append=$append
    d_tangle=$tangle
}

function reset(){
    tanglefile=$d_tanglefile
    mkdirp=$d_mkdirp
    append=$d_append
    tangle=$d_tangle
}

while read line
do

    if [ "$first_line" = true ] && [ $(sed -n '/^<!--/p' <<< $line) ]; then
	first_comment_block=true
	global_settings=true
	continue
    fi

    if [ "$first_comment_block" = true ]; then
	if [ $(sed -n '/^-->/p' <<< $line) ]; then
	    first_comment_block=false
	    continue
	fi
	set_params $line
	set_as_default
    fi

    if ! [[ $(sed -n '/^```/p' <<< $line) ]]; then
	if [ "$code_block" = true ] && [ "$tangle" = true ]; then
	    echo $line >> $tanglefile
	fi
	continue
    fi

    if [ "$code_block" = true ]; then
	code_block=false
	continue
    fi

    reset
    set_params "$line"
    code_block=true

    if [ "$mkdirp" = true ]; then
	if [ "$tanglefile" = "/dev/stdout" ]; then
	    continue
	fi
	dir=$(dirname "$tanglefile")
	mkdir -p "$dir"
    fi

    if ! [ -e "$tanglefile" ]; then
	touch "$tanglefile"
    fi
    
    if [ "$append" != true ] || [ "$first_block" == true ]; then
	printf '' > ${tanglefile}
    fi
    first_block=false
done < $file
